
package Sky.Cat;


import Sky.Cat.model.Company;
import Sky.Cat.model.Product;
import Sky.Listener.DataListener;
import Sky.Listener.Event;
import Sky.Listener.EventListener;
import Sky.Listener.EventType;
import Sky.Table.CompanyJTable;
import Sky.Table.ITRequestJTable;
import Sky.Table.ProductJTable;
import dbConnect.DBConnect;
import org.bson.types.ObjectId;

import javax.swing.*;
import java.awt.*;
import java.util.List;

public class Main extends javax.swing.JFrame implements DataListener {
    public enum DatabaseMode {
        None,
        MySQL,
        MongoDB
    }

    public enum TableType {
        Company, Product
    }

    private static TableType currentTableType = TableType.Company;

    public enum SearchCondition {
        // For Company
        COMPANY_CODE("companyCode", "companyCode"),
        COMPANY_NAME("companyName", "companyName"),
        TAX_CODE("taxCode", "taxCode"),

        // For Product
        PRODUCT_CODE("productCode", "productCode"),
        PRODUCT_NAME("productName", "productName"),
        COMPANY_CODE_PRODUCT("companyCode", "companyCode");

        private final String sql;
        private final String mongo;

        SearchCondition(String sqlField, String mongoField) {
            this.sql = sqlField;
            this.mongo = mongoField;
        }

        public String getSql() {
            return this.sql;
        }

        public String getMongo() {
            return this.mongo;
        }

        public static SearchCondition[] getCompanyConditions() {
            return new SearchCondition[]{COMPANY_CODE, COMPANY_NAME, TAX_CODE};
        }

        public static SearchCondition[] getProductConditions() {
            return new SearchCondition[]{PRODUCT_CODE, PRODUCT_NAME, COMPANY_CODE_PRODUCT};
        }
    }

    private static SearchCondition searchCondition;

    private static DatabaseMode databaseMode = DatabaseMode.None;

    CompanyJTable companyJTable = new CompanyJTable();
    ProductJTable productJTable = new ProductJTable();

    private final String searchTips = "(Press search button or press Enter on keyboard to start searching)";

    public Main() {
        initComponents();

        setExtendedState(MAXIMIZED_BOTH);

        getContentPane().setBackground(new Color(165,196,221));

        loadTableData();

        SearchableValidator();

        EventListener.addListener(this);

        currentTableType = TableType.Company;
        updateSearchConditions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RequestPopUp = new javax.swing.JPopupMenu();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miAdd = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miUpdate = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        miDelete = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        TablePopUp = new javax.swing.JPopupMenu();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        Company = new javax.swing.JMenuItem();
        jSeparator11 = new javax.swing.JPopupMenu.Separator();
        Product = new javax.swing.JMenuItem();
        TableLable = new javax.swing.JLabel();
        ScrollPanel = new javax.swing.JScrollPane();
        DisplayTable = new javax.swing.JTable();
        tableOfRequestSeperator = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        searchWarnLable = new javax.swing.JLabel();
        requestSearchField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        addRequestButton = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        modifyRequestButton = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JSeparator();
        deleteRequestButton = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        refreshButton = new javax.swing.JButton();
        databaseTypeSelector = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        searchConditionCombox = new javax.swing.JComboBox<>();
        MenuBar = new javax.swing.JMenuBar();
        RequestMenu = new javax.swing.JMenu();
        TableMenu = new javax.swing.JMenu();

        RequestPopUp.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        RequestPopUp.setLabel("Request menu");
        RequestPopUp.add(jSeparator2);

        miAdd.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        miAdd.setText("Add...");
        miAdd.setToolTipText("Opening the Add Request Interface");
        miAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddActionPerformed(evt);
            }
        });
        RequestPopUp.add(miAdd);
        miAdd.getAccessibleContext().setAccessibleName("Add a request");

        RequestPopUp.add(jSeparator1);

        miUpdate.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        miUpdate.setText("Update...");
        miUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUpdateActionPerformed(evt);
            }
        });
        RequestPopUp.add(miUpdate);
        RequestPopUp.add(jSeparator6);

        miDelete.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        miDelete.setForeground(new java.awt.Color(255, 51, 51));
        miDelete.setText("Delete...");
        miDelete.setToolTipText("Open an interface to choose and delete request");
        miDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteActionPerformed(evt);
            }
        });
        RequestPopUp.add(miDelete);
        RequestPopUp.add(jSeparator3);

        TablePopUp.add(jSeparator10);

        Company.setText("jMenuItem1");
        Company.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompanyActionPerformed(evt);
            }
        });
        TablePopUp.add(Company);
        TablePopUp.add(jSeparator11);

        Product.setText("jMenuItem1");
        Product.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductActionPerformed(evt);
            }
        });
        TablePopUp.add(Product);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Storage Manager");
        setBackground(new java.awt.Color(165, 196, 221));
        setForeground(new java.awt.Color(108, 155, 125));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(1080, 720));
        setName("mainFrame"); // NOI18N
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        TableLable.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        TableLable.setText("Storage Manager");
        TableLable.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        ScrollPanel.setBackground(new java.awt.Color(121, 137, 145));
        ScrollPanel.setForeground(new java.awt.Color(129, 156, 173));
        ScrollPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        DisplayTable.setBackground(new java.awt.Color(121, 137, 145));
        DisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        DisplayTable.setGridColor(new java.awt.Color(0, 0, 0));
        DisplayTable.setPreferredSize(null);
        ScrollPanel.setViewportView(DisplayTable);

        tableOfRequestSeperator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Request Look up");
        jLabel2.setToolTipText("Search for a specific request");

        searchButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchButton.setText("Search");
        searchButton.setToolTipText("You can click it or press Enter to search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchWarnLable.setFont(new java.awt.Font("Segoe UI", 2, 13)); // NOI18N
        searchWarnLable.setForeground(new java.awt.Color(0, 153, 0));
        searchWarnLable.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchWarnLable.setLabelFor(requestSearchField);
        searchWarnLable.setText("(Enter an ID to look it up)");
        searchWarnLable.setToolTipText("You can press the search button or press Enter on keyboard to search");

        requestSearchField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        requestSearchField.setToolTipText("Enter a value to look it up.");
        requestSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestSearchFieldActionPerformed(evt);
            }
        });
        requestSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                requestSearchFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                requestSearchFieldKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Quick action");

        addRequestButton.setText("Add item");
        addRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRequestButtonActionPerformed(evt);
            }
        });

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);

        modifyRequestButton.setText("Modify selected item");
        modifyRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyRequestButtonActionPerformed(evt);
            }
        });

        jSeparator8.setOrientation(javax.swing.SwingConstants.VERTICAL);

        deleteRequestButton.setText("Delete selected item");
        deleteRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRequestButtonActionPerformed(evt);
            }
        });

        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);

        refreshButton.setDefaultCapable(false);
        refreshButton.setLabel("Refresh Table ");
        refreshButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        databaseTypeSelector.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        databaseTypeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(DatabaseMode.values()));
        databaseTypeSelector.setSelectedIndex(0);
        databaseTypeSelector.setSelectedItem(databaseMode);
        databaseTypeSelector.setToolTipText("Select A Database to load data from");
        databaseTypeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseTypeSelectorActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 102, 102));
        jLabel3.setText("Select a Database Mode");
        jLabel3.setToolTipText("Click on the drop down below to select between MongoDB and MySQL Database server");

        searchConditionCombox.setModel(new javax.swing.DefaultComboBoxModel<>(SearchCondition.values()));
        searchConditionCombox.setSelectedIndex(0);
        searchConditionCombox.setSelectedItem(searchCondition);
        searchConditionCombox.setToolTipText("Select an attribute to search for");
        searchConditionCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchConditionComboxActionPerformed(evt);
            }
        });

        MenuBar.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N

        RequestMenu.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        RequestMenu.setText("Operations");
        RequestMenu.setToolTipText("List CURT operations");
        RequestMenu.setActionCommand(" Operations ");
        RequestMenu.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        RequestMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                RequestMenuMenuSelected(evt);
            }
        });
        MenuBar.add(RequestMenu);

        TableMenu.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        TableMenu.setText("Tables");
        TableMenu.setActionCommand(" Tables ");
        TableMenu.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        TableMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                TableMenuMenuSelected(evt);
            }
        });
        MenuBar.add(TableMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ScrollPanel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TableLable)
                            .addComponent(databaseTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tableOfRequestSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addRequestButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(modifyRequestButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deleteRequestButton))
                                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(searchWarnLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchConditionCombox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(requestSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchButton)))
                                .addGap(35, 35, 35)))
                        .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(refreshButton)))
                .addContainerGap())
            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tableOfRequestSeperator, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(searchButton)
                            .addComponent(requestSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchConditionCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchWarnLable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(modifyRequestButton)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(addRequestButton)))
                            .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteRequestButton)))
                    .addComponent(jSeparator9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(databaseTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TableLable)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static SearchCondition getSearchCondition() {
        return searchCondition;
    }

    public static void setSearchCondition(SearchCondition searchCondition) {
        Main.searchCondition = searchCondition;
    }

    public static DatabaseMode getDatabaseMode() {
        return databaseMode;
    }

    public static void setDatabaseMode(DatabaseMode databaseMode) {
        Main.databaseMode = databaseMode;
    }

    private void RequestMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_RequestMenuMenuSelected
        RequestPopUp.show(RequestMenu, 0, RequestMenu.getHeight());
    }//GEN-LAST:event_RequestMenuMenuSelected

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (RequestPopUp.isVisible() && !RequestPopUp.getBounds().contains(evt.getPoint())) {
            RequestPopUp.setVisible(false);
        }

        if (TablePopUp.isVisible() && !TablePopUp.getBounds().contains(evt.getPoint())) {
            TablePopUp.setVisible(false);
        }
    }//GEN-LAST:event_formMouseClicked

    private void miAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddActionPerformed
        if (databaseMode == DatabaseMode.None) return;

        switch (currentTableType) {
            case Company -> {
                AddCompany addCompany = new AddCompany();
                addCompany.setVisible(true);
            }
            case Product -> {
                AddProduct addProduct = new AddProduct();
                addProduct.setVisible(true);
            }
        }
    }//GEN-LAST:event_miAddActionPerformed

    private void miDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeleteActionPerformed
        if (databaseMode == DatabaseMode.None) return;

        switch (currentTableType) {
            case Company -> {
                DeleteCompany deleteCompany = new DeleteCompany();
                deleteCompany.setVisible(true);
            }
            case Product -> {
                DeleteProduct deleteProduct = new DeleteProduct();
                deleteProduct.setVisible(true);
            }
        }
    }//GEN-LAST:event_miDeleteActionPerformed

    private void requestSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {
        if (searchButton.isEnabled()) {
            searchButton.doClick();
        }
    }                                                  

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        if (requestSearchField.getText().isEmpty() || requestSearchField.getText().isBlank()) return;

        EventListener.inform(new Event(EventType.DataSearchEvent));
    }//GEN-LAST:event_searchButtonActionPerformed

    private void requestSearchFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_requestSearchFieldKeyPressed
    }//GEN-LAST:event_requestSearchFieldKeyPressed

    private void SearchableValidator() {
        try {
            if (databaseMode.equals(DatabaseMode.None)) throw new IllegalStateException("Database not selected!");

            String fieldVal = requestSearchField.getText();
            if (fieldVal.isBlank()) {
                searchButton.setEnabled(false);
                searchWarnLable.setForeground(new Color(255,153,51));
                searchWarnLable.setText("Please enter value to search.");
            } else {
                searchButton.setEnabled(true);
                searchWarnLable.setForeground(new Color(0,153,0));
                searchWarnLable.setText(searchTips);
            }

        } catch (IllegalStateException e) {
            searchButton.setEnabled(false);
            searchWarnLable.setForeground(new Color(255,153,51));
            searchWarnLable.setText("Warning: Database Mode is currently set to None");
        }
    }

    private void requestSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_requestSearchFieldKeyReleased
        SearchableValidator();
    }//GEN-LAST:event_requestSearchFieldKeyReleased

    private void miUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUpdateActionPerformed
        if (databaseMode == DatabaseMode.None) return;

        switch (currentTableType) {
            case Company -> {
                UpdateCompany updateCompany = new UpdateCompany();
                updateCompany.setVisible(true);
            }
            case Product -> {
                UpdateProduct updateProduct = new UpdateProduct();
                updateProduct.setVisible(true);
            }
        }
    }//GEN-LAST:event_miUpdateActionPerformed

    private void modifyRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyRequestButtonActionPerformed
        if (databaseMode == DatabaseMode.None) return;

        int row = DisplayTable.getSelectedRow();

        switch (currentTableType) {
            case Company -> {
                if (row != -1) {
                    Company company = ((CompanyJTable) DisplayTable.getModel()).getCompanyAt(row);
                    UpdateCompany updateCompany = new UpdateCompany(company.getCompanyCode());
                    updateCompany.setVisible(true);
                } else {
                    UpdateCompany updateCompany = new UpdateCompany();
                    updateCompany.setVisible(true);
                }
            }
            case Product -> {
                if (row != -1) {
                    Product product = ((ProductJTable) DisplayTable.getModel()).getProductAt(row);
                    UpdateProduct updateProduct = new UpdateProduct(product.getProductCode());
                    updateProduct.setVisible(true);
                } else {
                    UpdateProduct updateProduct = new UpdateProduct();
                    updateProduct.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_modifyRequestButtonActionPerformed

    private void addRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRequestButtonActionPerformed
        if (databaseMode == DatabaseMode.None) return;

        switch (currentTableType) {
            case Company -> {
                AddCompany addCompany = new AddCompany();
                addCompany.setVisible(true);
            }
            case Product -> {
                AddProduct addProduct = new AddProduct();
                addProduct.setVisible(true);
            }
        }
    }//GEN-LAST:event_addRequestButtonActionPerformed

    private void deleteRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRequestButtonActionPerformed
        if (databaseMode == DatabaseMode.None) return;

        int row = DisplayTable.getSelectedRow();

        if (row != -1) {
            ITRequest itRequest = ((ITRequestJTable) DisplayTable.getModel()).getRequestAt(row);

            boolean success = DBConnect.delete(itRequest);

            if (success) {
                javax.swing.JOptionPane.showMessageDialog(this, "Request removed from database!", "Successes", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                loadTableData();
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Cannot remove request", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteRequestButtonActionPerformed

    private void databaseTypeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseTypeSelectorActionPerformed
        databaseMode = (DatabaseMode) databaseTypeSelector.getSelectedItem();

        EventListener.inform(new Event(EventType.SwitchDatabaseEvent));
    }//GEN-LAST:event_databaseTypeSelectorActionPerformed

    private void searchConditionComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchConditionComboxActionPerformed
        searchCondition = (SearchCondition) searchConditionCombox.getSelectedItem();
        SearchableValidator();
    }//GEN-LAST:event_searchConditionComboxActionPerformed

    private void TableMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_TableMenuMenuSelected
        Company.setText("Company Table");
        Product.setText("Product Table");
        TablePopUp.show(TableMenu, 0, TableMenu.getHeight());
    }//GEN-LAST:event_TableMenuMenuSelected

    private void CompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompanyActionPerformed
        currentTableType = TableType.Company;
        updateSearchConditions();
        loadTableData();
    }//GEN-LAST:event_CompanyActionPerformed

    private void ProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductActionPerformed
        currentTableType = TableType.Product;
        updateSearchConditions();
        loadTableData();
    }//GEN-LAST:event_ProductActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (databaseMode == DatabaseMode.None) return;

        requestSearchField.setText(null);
        SearchableValidator();
        EventListener.inform(new Event(EventType.DataEvent));
    }                                             

    private List<Company> getCompanies() {
        if (databaseMode == DatabaseMode.None) return List.of();
        return DBConnect.retrieveAll(Company.class);
    }

    private List<Company> getCompanies(Object value) {
        if (databaseMode == DatabaseMode.None) return List.of();
        String condition;
        Object searchValue = value;

        if (databaseMode.equals(DatabaseMode.MySQL)) {
            condition = searchCondition.getSql() + " like ?";
            searchValue = "%" + value.toString() + "%";
        } else {
            condition = "{\"" + searchCondition.getMongo() + "\" : ?}";
            searchValue = "/" + value.toString() + "/";
        }
        return DBConnect.retrieve(Company.class, condition, searchValue);
    }

    private List<Product> getProducts() {
        if (databaseMode == DatabaseMode.None) return List.of();
        return DBConnect.retrieveAll(Product.class);
    }

    private List<Product> getProducts(Object value) {
        if (databaseMode == DatabaseMode.None) return List.of();
        String condition;
        Object searchValue = value;

        if (databaseMode.equals(DatabaseMode.MySQL)) {
            condition = searchCondition.getSql() + " like ?";
            searchValue = "%" + value.toString() + "%";
        } else {
            condition = "{\"" + searchCondition.getMongo() + "\" : ?}";
            searchValue = "/" + value.toString() + "/";
        }
        return DBConnect.retrieve(Product.class, condition, searchValue);
    }

    private void loadTableData() {
        if (databaseMode == DatabaseMode.None) return;

        if (currentTableType == TableType.Company) {
            List<Company> companyList = getCompanies();
            companyJTable.updateData(companyList);
            DisplayTable.setModel(companyJTable);
        } else {
            List<Product> productList = getProducts();
            productJTable.updateData(productList);
            DisplayTable.setModel(productJTable);
        }
    }

    private void loadTableData(Object value) {
        if (databaseMode == DatabaseMode.None) return;

        if (currentTableType == TableType.Company) {
            List<Company> companyList = getCompanies(value);
            companyJTable.updateData(companyList);
            DisplayTable.setModel(companyJTable);
        } else {
            List<Product> productList = getProducts(value);
            productJTable.updateData(productList);
            DisplayTable.setModel(productJTable);
        }
    }
    @Override
    public void onUpdated(Event event) {
        switch (event.type) {
            case DataEvent -> {
                loadTableData();
                System.out.println("A data event triggered. Updating data...");
            }
            case DataSearchEvent -> {
                Object searchValue = requestSearchField.getText();
                loadTableData(searchValue);
                System.out.println("A search event for value: '" + searchValue + "' triggered. Updating data...");
            }
            case SwitchDatabaseEvent -> {
                switch (databaseMode) {
                    case MySQL -> DBConnect.initializeSQL("store_storage");
                    case MongoDB -> DBConnect.initializeMongo("store_storage");
                    case None -> clearAllTable();
                }
                loadTableData();
                SearchableValidator();
            }
            default -> System.out.println("An unknown event happened. Type: " + event.type);
        }

    }

    private void clearAllTable() {
        companyJTable.updateData(List.of());
        productJTable.updateData(List.of());

        if (currentTableType == TableType.Company) {
            DisplayTable.setModel(companyJTable);
        } else {
            DisplayTable.setModel(productJTable);
        }
    }

    private void updateSearchConditions() {
        searchConditionCombox.removeAllItems();
        SearchCondition[] conditions = currentTableType == TableType.Company ?
                SearchCondition.getCompanyConditions() : SearchCondition.getProductConditions();

        for (SearchCondition condition : conditions) {
            searchConditionCombox.addItem(condition);
        }

        if (conditions.length > 0) {
            searchCondition = conditions[0];
            searchConditionCombox.setSelectedItem(searchCondition);
        }

        SearchableValidator();
    }

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Company;
    private javax.swing.JTable DisplayTable;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem Product;
    private javax.swing.JMenu RequestMenu;
    private javax.swing.JPopupMenu RequestPopUp;
    private javax.swing.JScrollPane ScrollPanel;
    private javax.swing.JLabel TableLable;
    private javax.swing.JMenu TableMenu;
    private javax.swing.JPopupMenu TablePopUp;
    private javax.swing.JButton addRequestButton;
    private javax.swing.JComboBox<DatabaseMode> databaseTypeSelector;
    private javax.swing.JButton deleteRequestButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator11;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JMenuItem miAdd;
    private javax.swing.JMenuItem miDelete;
    private javax.swing.JMenuItem miUpdate;
    private javax.swing.JButton modifyRequestButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField requestSearchField;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<SearchCondition> searchConditionCombox;
    private javax.swing.JLabel searchWarnLable;
    private javax.swing.JSeparator tableOfRequestSeperator;
    // End of variables declaration//GEN-END:variables
}
