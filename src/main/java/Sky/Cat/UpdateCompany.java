/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Sky.Cat;


import Sky.Cat.model.Company;
import Sky.Cat.model.Product;
import Sky.DateModel.DateSpinnerDataModel;
import Sky.Listener.Event;
import Sky.Listener.EventListener;
import Sky.Listener.EventType;
import com.google.gson.Gson;
import dbConnect.DBConnect;
import dbConnect.models.json.JsonUtility;

import javax.swing.*;
import java.awt.*;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class UpdateCompany extends javax.swing.JFrame {
    DateSpinnerDataModel dateSpinnerDataModel = new DateSpinnerDataModel();

    public UpdateCompany() {
        initComponents();

        getContentPane().setBackground(new Color(165,196,221));

        loadCompanyComboBox();
    }

    public UpdateCompany(String companyCode) {
        this();
        fillComboBox(companyCode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new javax.swing.JButton();
        updateCompanyButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        websiteField = new javax.swing.JTextField();
        taxCodeField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        clearInfoButton = new javax.swing.JButton();
        detailWarnLabel = new javax.swing.JLabel();
        companyNameField = new javax.swing.JTextField();
        establishedYearSpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        isPublicCheckbox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        revenueField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        marketCapField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        businessTypeTextArea = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        addressTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        contactTextArea = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        companyIdComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Request");
        setAlwaysOnTop(true);
        setLocationByPlatform(true);

        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        updateCompanyButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateCompanyButton.setText("Update Company");
        updateCompanyButton.setToolTipText("Update an existing company in the database");
        updateCompanyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCompanyButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Company Code");

        jLabel2.setText("Company Name");

        websiteField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                websiteFieldKeyReleased(evt);
            }
        });

        taxCodeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taxCodeFieldKeyReleased(evt);
            }
        });

        jLabel4.setText("Tax Code");

        jLabel7.setText("Website URL");

        clearInfoButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clearInfoButton.setText("Clear info");
        clearInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearInfoButtonActionPerformed(evt);
            }
        });

        companyNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                companyNameFieldActionPerformed(evt);
            }
        });
        companyNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                companyNameFieldKeyReleased(evt);
            }
        });

        establishedYearSpinner.setModel(new javax.swing.SpinnerNumberModel(1970, 1, null, 1));

        jLabel9.setText("Established Year");

        isPublicCheckbox.setText("Public Company");
        isPublicCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isPublicCheckboxActionPerformed(evt);
            }
        });

        jLabel3.setText("Revenue");

        revenueField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revenueFieldActionPerformed(evt);
            }
        });
        revenueField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                revenueFieldKeyReleased(evt);
            }
        });

        jLabel5.setText("Address (JSON)");

        marketCapField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marketCapFieldActionPerformed(evt);
            }
        });
        marketCapField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                marketCapFieldKeyReleased(evt);
            }
        });

        jLabel6.setText("Market Cap");

        businessTypeTextArea.setColumns(20);
        businessTypeTextArea.setRows(5);
        jScrollPane1.setViewportView(businessTypeTextArea);

        jLabel8.setText("Contact (JSON)");

        addressTextArea.setColumns(20);
        addressTextArea.setRows(5);
        jScrollPane2.setViewportView(addressTextArea);

        contactTextArea.setColumns(20);
        contactTextArea.setRows(5);
        jScrollPane3.setViewportView(contactTextArea);

        jLabel10.setText("Business Type");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Each type seperate with a comma \",\"");

        companyIdComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                companyIdComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3))
                        .addGap(2, 2, 2))
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(companyIdComboBox, 0, 240, Short.MAX_VALUE)
                            .addComponent(taxCodeField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(establishedYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(companyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 167, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(updateCompanyButton)
                                        .addGap(58, 58, 58)
                                        .addComponent(clearInfoButton)
                                        .addGap(57, 57, 57)
                                        .addComponent(cancelButton)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detailWarnLabel))
                    .addComponent(websiteField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(marketCapField, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(revenueField, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(isPublicCheckbox)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(companyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(companyIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(establishedYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(taxCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(websiteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(revenueField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(isPublicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(marketCapField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(detailWarnLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(63, 63, 63)
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(clearInfoButton)
                    .addComponent(updateCompanyButton))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void clearInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearInfoButtonActionPerformed
        clearFormFields();
    }//GEN-LAST:event_clearInfoButtonActionPerformed

    private void updateCompanyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCompanyButtonActionPerformed
        updateCompanyToDatabase();

        EventListener.inform(new Event(EventType.DataEvent));
    }//GEN-LAST:event_updateCompanyButtonActionPerformed

    private void websiteFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_websiteFieldKeyReleased
    }//GEN-LAST:event_websiteFieldKeyReleased

    private void taxCodeFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taxCodeFieldKeyReleased
    }//GEN-LAST:event_taxCodeFieldKeyReleased

    private void companyNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_companyNameFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_companyNameFieldKeyReleased

    private void companyNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_companyNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_companyNameFieldActionPerformed

    private void isPublicCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isPublicCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isPublicCheckboxActionPerformed

    private void revenueFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_revenueFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_revenueFieldKeyReleased

    private void revenueFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revenueFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_revenueFieldActionPerformed

    private void marketCapFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marketCapFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_marketCapFieldActionPerformed

    private void marketCapFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_marketCapFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_marketCapFieldKeyReleased

    private void companyIdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_companyIdComboBoxActionPerformed
        Company selectedCompany = (Company) companyIdComboBox.getSelectedItem();
        if (selectedCompany != null) {
            try {
                companyNameField.setText(selectedCompany.getCompanyName());
                if (selectedCompany.getTaxCode() != null) {
                    taxCodeField.setText(selectedCompany.getTaxCode());
                }
                establishedYearSpinner.setValue(selectedCompany.getEstablishedYear());

                if (selectedCompany.getWebsite() != null) {
                    websiteField.setText(selectedCompany.getWebsite());
                }

                if (selectedCompany.getRevenue() != null) {
                    revenueField.setText(selectedCompany.getRevenue());
                }

                isPublicCheckbox.setSelected(selectedCompany.isPublic());

                if (selectedCompany.getMarketCap() != null) {
                    marketCapField.setText(selectedCompany.getMarketCap());
                }

                if (selectedCompany.getAddress() != null && !selectedCompany.getAddress().isEmpty()) {
                    addressTextArea.setText(JsonUtility.toJson(selectedCompany.getAddress()));
                }

                if (selectedCompany.getContact() != null && !selectedCompany.getContact().isEmpty()) {
                    contactTextArea.setText(JsonUtility.toJson(selectedCompany.getAddress()));
                }

                if (selectedCompany.getBusinessType() != null && !selectedCompany.getBusinessType().isEmpty()) {
                    String businessTypes = String.join(", ", selectedCompany.getBusinessType());
                    businessTypeTextArea.setText(businessTypes);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error loading company data: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println("Error populating company fields: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_companyIdComboBoxActionPerformed

    private void clearFormFields() {
        taxCodeField.setText(null);
        websiteField.setText(null);
    }

    private void updateCompanyToDatabase() {
        try {
            Company selectedCompany = (Company) companyIdComboBox.getSelectedItem();
            if (selectedCompany == null ) {
                JOptionPane.showMessageDialog(this, "Please select a company to update!",
                        "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Required fields
            String companyCode = selectedCompany.getCompanyCode();
            String companyName = companyNameField.getText().trim();

            // Validation
            if (companyCode.isEmpty() || companyName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Company Code and Company Name are required!", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Create company object
            Company company = new Company(companyCode, companyName);

            // Set optional fields
            if (!taxCodeField.getText().trim().isEmpty()) {
                company.setTaxCode(taxCodeField.getText().trim());
            }

            if (establishedYearSpinner.getValue() != null) {
                company.setEstablishedYear((Integer) establishedYearSpinner.getValue());
            }

            if (!websiteField.getText().trim().isEmpty()) {
                company.setWebsite(websiteField.getText().trim());
            }

            company.setPublic(isPublicCheckbox.isSelected());

            if (!revenueField.getText().trim().isEmpty()) {
                company.setRevenue(revenueField.getText().trim());
            }

            if (!marketCapField.getText().trim().isEmpty()) {
                company.setMarketCap(marketCapField.getText().trim());
            }

            // Handle JSON fields
            if (!addressTextArea.getText().trim().isEmpty()) {
                try {
                    Map<String, Object> address = parseJsonToMap(addressTextArea.getText().trim());
                    company.setAddress(address);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Invalid JSON format in Address field!", "JSON Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            if (!contactTextArea.getText().trim().isEmpty()) {
                try {
                    Map<String, Object> contact = parseJsonToMap(contactTextArea.getText().trim());
                    company.setContact(contact);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Invalid JSON format in Contact field!", "JSON Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Handle business types (comma-separated list)
            if (!businessTypeTextArea.getText().trim().isEmpty()) {
                List<String> businessTypes = Arrays.asList(businessTypeTextArea.getText().split(","))
                        .stream()
                        .map(String::trim)
                        .filter(s -> !s.isEmpty())
                        .collect(Collectors.toList());
                company.setBusinessType(businessTypes);
            }

            // Insert to database
            boolean success = DBConnect.update(company);
            if (success) {
                JOptionPane.showMessageDialog(this, "Company updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                clearCompanyFields();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update company!", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to update company.  " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadCompanyComboBox() {
        try {
            List<Company> companies = DBConnect.retrieveAll(Company.class);
            companyIdComboBox.removeAllItems();
            for (Company company : companies) {
                companyIdComboBox.addItem(company);
            }
        } catch (Exception e) {
            System.out.println("Error loading companies: " + e.getMessage());
        }
    }

    // Helper Methods
    private Map<String, Object> parseJsonToMap(String jsonString) {
        try {
            return JsonUtility.fromJson(jsonString, Map.class);
        } catch (Exception e) {
            throw new IllegalArgumentException("Invalid JSON format: " + e.getMessage());
        }
    }

    private List<String> parseCommaSeparatedList(String input) {
        return Arrays.asList(input.split(","))
                .stream()
                .map(String::trim)
                .filter(s -> !s.isEmpty())
                .collect(Collectors.toList());
    }

    private void clearCompanyFields() {
        companyIdComboBox.setSelectedItem(-1);
        companyNameField.setText("");
        taxCodeField.setText("");
        establishedYearSpinner.setValue(2000);
        websiteField.setText("");
        isPublicCheckbox.setSelected(false);
        revenueField.setText("");
        marketCapField.setText("");
        addressTextArea.setText("");
        contactTextArea.setText("");
        businessTypeTextArea.setText("");
    }

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateCompany.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateCompany().setVisible(true);
            }
        });
    }

    private void fillComboBox(String companyCode) {
        try {
            String condition;
            if (Main.getDatabaseMode() == Main.DatabaseMode.MySQL) {
                condition = "companyCode = ?";
            } else {
                condition = "companyCode : ?";
            }

            List<Company> companies = DBConnect.retrieve(Company.class, condition, companyCode);
            companyIdComboBox.removeAllItems();
            for (Company company : companies) {
                companyIdComboBox.addItem(company);
            }
        } catch (Exception e) {
            System.out.println("Error loading specific company: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea addressTextArea;
    private javax.swing.JTextArea businessTypeTextArea;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearInfoButton;
    private javax.swing.JComboBox<Company> companyIdComboBox;
    private javax.swing.JTextField companyNameField;
    private javax.swing.JTextArea contactTextArea;
    private javax.swing.JLabel detailWarnLabel;
    private javax.swing.JSpinner establishedYearSpinner;
    private javax.swing.JCheckBox isPublicCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField marketCapField;
    private javax.swing.JTextField revenueField;
    private javax.swing.JTextField taxCodeField;
    private javax.swing.JButton updateCompanyButton;
    private javax.swing.JTextField websiteField;
    // End of variables declaration//GEN-END:variables
}
